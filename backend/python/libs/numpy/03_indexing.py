#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
@Author : jay.wang
@Date   : 2022/7/12 15:59
@Desc   : 索引
"""
import numpy as np

'''
================================================ 单元素索引：同 python 序列的使用 ================================================
'''
# 索引一维数组
x = np.arange(6)  # [0 1 2 3 4 5]
print(x[0], x[-1])  # 0 5

# 索引多维数组
x.shape = (2, 3)
'''
[[0 1 2]
 [3 4 5]]
'''
print(x[1, 2])  # 5
print(x[0])  # 获取到子维数组：[0 1 2]

# 切片（结果只是源数组的视图，而不复制）
y = np.arange(10)  # [0 1 2 3 4 5 6 7 8 9]
print(y[2:5])  # [2 3 4]

# Ellipsis
z = np.array([[[1, 2], [2, 3], [3, 4]], [[4, 5], [5, 6], [6, 7]]])
print('Ellipsis: ', z[..., 0])      # 同 z[:, :, 0]
'''
[[1 2 3]
 [4 5 6]]
'''

# newaxis
zz = np.array([[[1], [2], [3]], [[4], [5], [6]]])   # shape: (2, 3, 1)
print('newaxis: ', zz[:, np.newaxis, :, :])   # shape: (2, 1, 3, 1)
'''
[[[[1]
   [2]
   [3]]]
 [[[4]
   [5]
   [6]]]]
'''
hh = np.arange(5)       # [0 1 2 3 4]
print(hh[:, np.newaxis])    # shape: (5, 1)
'''
[[0]
 [1]
 [2]
 [3]
 [4]]
'''
print(hh[np.newaxis, :])    # [[0 1 2 3 4]] shape: (1, 5)
print(hh[:, np.newaxis] + hh[np.newaxis, :])    # shape: (5, 5)


'''
================================================ 高级索引：整数索引、布尔索引 ================================================
- 触发条件（取决于选择对象）
    - 非元组序列对象
    - ndarray（元素类型为整数 or 布尔）
    - 至少有一个序列元素 or ndarray 的元组
- 会 copy 数据，而不像切片仅产生 view

布尔索引
'''
'''
整数索引
- 每个 integer 数组意味着当前维度的索引
- 多维整数索引：
'''
adi_x = np.arange(10, 1, -1)    # [10,  9,  8,  7,  6,  5,  4,  3,  2]
print('整数索引: ', adi_x[np.array([3, 3, 1, 8])])      # [7 7 9 2]

adi_y = np.arange(35).reshape(5, 7)
'''
[[ 0,  1,  2,  3,  4,  5,  6],
[ 7,  8,  9, 10, 11, 12, 13],
[14, 15, 16, 17, 18, 19, 20],
[21, 22, 23, 24, 25, 26, 27],
[28, 29, 30, 31, 32, 33, 34]]
'''
print('多维整数索引: ', adi_y[np.array([0, 2, 4]), np.array([0, 1, 2])])  # [ 0 15 30]    [0N_i0 2N_ii 4N_i2]




'''
================================================ 索引数组 ================================================
- 用来索引数组的数组。元素必须是整数类型，值代表索引值。
- 返回的是原始数据的副本，而不是切片获取的视图
- 返回的数组跟原数组有相同的形状（shape）
'''
z = np.arange(10, 1, -1)  # [10  9  8  7  6  5  4  3  2]
print(z[np.array([3, 3, -3, 8])])  # [7 7 4 2]
print(z[np.array([[1, 1], [2, 3]])])  # 多维索引数组
'''
[[9 9]
 [8 7]]
'''

'''
================================================ 索引多维数组 ================================================
- 多维索引数组
    - 索引数组的维度具有相同的形状：结果数组具有与索引数组相同的形状
    - 索引数组的维度具有不同的形状：
'''
print('=' * 60)
ny = np.arange(35).reshape(5, 7)
'''
[[ 0  1  2  3  4  5  6]
 [ 7  8  9 10 11 12 13]
 [14 15 16 17 18 19 20]
 [21 22 23 24 25 26 27]
 [28 29 30 31 32 33 34]]
'''
print(ny[np.array([0, 2, 4]), np.array([0, 1, 2])])  # [0 15 30] 定位到的是：[0,0]、[2,1]、[4,2]
# print(ny[np.array([0, 2, 4]), np.array([0, 1])])  # [0 15 30] 定位到的是：[0,0]、[2,1]、[4,2]
